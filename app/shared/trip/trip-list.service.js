"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/map");
var config_1 = require("../config");
var trip_1 = require("./trip");
var TripListService = (function () {
    function TripListService(http) {
        this.http = http;
    }
    TripListService.prototype.load = function () {
        var _this = this;
        return this.http.get(config_1.Config.apiUrl + "/models/trips?action=includeRelationships")
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var list = [];
            var trips = _this.deserialize(data);
            trips.forEach(function (trip) {
                list.push(new trip_1.Trip(trip.id, trip.name, trip.destination, trip.approvedTravellersCount, trip.partnersReqd, trip.coverPhoto, trip.organiser, new Date(trip.dateStart), new Date(trip.dateEnd)));
            });
            return list;
        })
            .catch(this.handleErrors);
    };
    TripListService.prototype.loadOne = function (id) {
        return this.http.get(config_1.Config.apiUrl + "/models/trips/" + id)
            .map(function (res) { return res.json(); })
            .map(function (data) { return data.trip; })
            .catch(this.handleErrors);
    };
    TripListService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    TripListService.prototype.deserialize = function (data) {
        var _this = this;
        var trips = data.trips, photos = data.photos, users = data.users;
        var result = trips.map(function (item) {
            var organiserData = _this.getByValue(users, item.organiser);
            var organiser = Object.assign({}, organiserData, {
                photo: _this.getByValue(photos, organiserData.photo),
                photos: organiserData.photos.map(function (photoId) { return _this.getByValue(photos, photoId); })
            });
            var trip = Object.assign({}, item, {
                coverPhoto: _this.getByValue(photos, item.coverPhoto),
                photos: item.photos.map(function (photoId) { return _this.getByValue(photos, photoId); }),
                organiser: organiser
            });
            return trip;
        });
        return result;
    };
    TripListService.prototype.getByValue = function (collection, fieldValue, fieldName) {
        if (fieldName === void 0) { fieldName = 'id'; }
        return collection.find(function (item) { return item[fieldName] === fieldValue; });
    };
    return TripListService;
}());
TripListService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], TripListService);
exports.TripListService = TripListService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpcC1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmlwLWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyxzQ0FBd0Q7QUFDeEQsOEJBQXFDO0FBQ3JDLGlDQUErQjtBQUUvQixvQ0FBbUM7QUFDbkMsK0JBQThCO0FBRzlCLElBQWEsZUFBZTtJQUN4Qix5QkFBb0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07SUFBSSxDQUFDO0lBRW5DLDhCQUFJLEdBQUo7UUFBQSxpQkFxQkM7UUFwQkcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQU0sQ0FBQyxNQUFNLEdBQUcsMkNBQTJDLENBQUM7YUFDNUUsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFWLENBQVUsQ0FBQzthQUN0QixHQUFHLENBQUMsVUFBQSxJQUFJO1lBQ0wsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2QsSUFBTSxLQUFLLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtnQkFDZixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLHVCQUF1QixFQUM1QixJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ3pCLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxpQ0FBTyxHQUFQLFVBQVEsRUFBVTtRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFNLENBQUMsTUFBTSxHQUFHLGdCQUFnQixHQUFHLEVBQUUsQ0FBQzthQUN0RCxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDO2FBQ3RCLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEVBQVQsQ0FBUyxDQUFDO2FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxLQUFlO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxlQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxxQ0FBVyxHQUFYLFVBQVksSUFBUztRQUFyQixpQkFpQkM7UUFoQlcsSUFBQSxrQkFBSyxFQUFFLG9CQUFNLEVBQUUsa0JBQUssQ0FBVTtRQUN0QyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtZQUN6QixJQUFNLGFBQWEsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0QsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFO2dCQUMvQyxLQUFLLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQztnQkFDbkQsTUFBTSxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQWhDLENBQWdDLENBQUM7YUFDaEYsQ0FBQyxDQUFDO1lBQ0gsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO2dCQUNqQyxVQUFVLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDcEQsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQWhDLENBQWdDLENBQUM7Z0JBQ3BFLFNBQVMsV0FBQTthQUNaLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFnQjtRQUFoQiwwQkFBQSxFQUFBLGdCQUFnQjtRQUMvQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLEVBQTlCLENBQThCLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBNURELElBNERDO0FBNURZLGVBQWU7SUFEM0IsaUJBQVUsRUFBRTtxQ0FFaUIsV0FBSTtHQURyQixlQUFlLENBNEQzQjtBQTVEWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcblxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHsgVHJpcCB9IGZyb20gXCIuL3RyaXBcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyaXBMaXN0U2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwKSB7IH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KENvbmZpZy5hcGlVcmwgKyBcIi9tb2RlbHMvdHJpcHM/YWN0aW9uPWluY2x1ZGVSZWxhdGlvbnNoaXBzXCIpXG4gICAgICAgICAgICAubWFwKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgLm1hcChkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyaXBzID0gdGhpcy5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB0cmlwcy5mb3JFYWNoKCh0cmlwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChuZXcgVHJpcCh0cmlwLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpcC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpcC5kZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaXAuYXBwcm92ZWRUcmF2ZWxsZXJzQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlwLnBhcnRuZXJzUmVxZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaXAuY292ZXJQaG90byxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaXAub3JnYW5pc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUodHJpcC5kYXRlU3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUodHJpcC5kYXRlRW5kKSxcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3JzKTtcbiAgICB9XG5cbiAgICBsb2FkT25lKGlkOiBTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoQ29uZmlnLmFwaVVybCArIFwiL21vZGVscy90cmlwcy9cIiArIGlkKVxuICAgICAgICAgICAgLm1hcChyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgIC5tYXAoZGF0YSA9PiBkYXRhLnRyaXApXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcnMpO1xuICAgIH1cblxuICAgIGhhbmRsZUVycm9ycyhlcnJvcjogUmVzcG9uc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXJyb3IuanNvbigpKSk7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgICB9XG5cbiAgICBkZXNlcmlhbGl6ZShkYXRhOiBhbnkpIHtcbiAgICAgICAgY29uc3QgeyB0cmlwcywgcGhvdG9zLCB1c2VycyB9ID0gZGF0YTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHJpcHMubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3JnYW5pc2VyRGF0YSA9IHRoaXMuZ2V0QnlWYWx1ZSh1c2VycywgaXRlbS5vcmdhbmlzZXIpO1xuICAgICAgICAgICAgY29uc3Qgb3JnYW5pc2VyID0gT2JqZWN0LmFzc2lnbih7fSwgb3JnYW5pc2VyRGF0YSwge1xuICAgICAgICAgICAgICAgIHBob3RvOiB0aGlzLmdldEJ5VmFsdWUocGhvdG9zLCBvcmdhbmlzZXJEYXRhLnBob3RvKSxcbiAgICAgICAgICAgICAgICBwaG90b3M6IG9yZ2FuaXNlckRhdGEucGhvdG9zLm1hcChwaG90b0lkID0+IHRoaXMuZ2V0QnlWYWx1ZShwaG90b3MsIHBob3RvSWQpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0cmlwID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgICAgIGNvdmVyUGhvdG86IHRoaXMuZ2V0QnlWYWx1ZShwaG90b3MsIGl0ZW0uY292ZXJQaG90byksXG4gICAgICAgICAgICAgICAgcGhvdG9zOiBpdGVtLnBob3Rvcy5tYXAocGhvdG9JZCA9PiB0aGlzLmdldEJ5VmFsdWUocGhvdG9zLCBwaG90b0lkKSksXG4gICAgICAgICAgICAgICAgb3JnYW5pc2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cmlwO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldEJ5VmFsdWUoY29sbGVjdGlvbiwgZmllbGRWYWx1ZSwgZmllbGROYW1lID0gJ2lkJykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5maW5kKGl0ZW0gPT4gaXRlbVtmaWVsZE5hbWVdID09PSBmaWVsZFZhbHVlKTtcbiAgICB9XG59Il19